
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.practica1.Analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import com.example.practica1.Graficas.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class GraficasParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public GraficasParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public GraficasParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GraficasParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\002\000\002\003\004\000\002\004\066" +
    "\000\002\004\052\000\002\004\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\010\005\000\002\010\003\000\002\007" +
    "\005\000\002\007\003\000\002\007\002\000\002\005\003" +
    "\000\002\005\003\000\002\005\002\000\002\006\004\000" +
    "\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\010\002\ufffe\003\006\012\004\001\002\000" +
    "\010\003\012\006\013\007\014\001\002\000\004\002\000" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\010\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\ufffa\001\002\000\004\022\125\001\002\000" +
    "\004\022\015\001\002\000\004\027\016\001\002\000\004" +
    "\035\017\001\002\000\006\005\020\021\ufff0\001\002\000" +
    "\006\021\ufff1\041\123\001\002\000\004\021\022\001\002" +
    "\000\004\030\023\001\002\000\004\035\024\001\002\000" +
    "\004\011\025\001\002\000\004\021\026\001\002\000\004" +
    "\036\027\001\002\000\004\035\030\001\002\000\004\025" +
    "\031\001\002\000\004\005\032\001\002\000\004\024\033" +
    "\001\002\000\004\005\034\001\002\000\004\026\035\001" +
    "\002\000\004\021\036\001\002\000\004\034\037\001\002" +
    "\000\004\035\040\001\002\000\004\025\041\001\002\000" +
    "\010\003\042\004\045\017\043\001\002\000\024\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\023\ufff3\024" +
    "\ufff3\026\ufff3\001\002\000\010\003\042\004\045\017\043" +
    "\001\002\000\014\013\051\014\046\015\052\016\047\024" +
    "\050\001\002\000\024\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\020\ufff5\021\ufff5\023\ufff5\024\ufff5\026\ufff5\001\002\000" +
    "\010\003\042\004\045\017\043\001\002\000\010\003\042" +
    "\004\045\017\043\001\002\000\010\003\042\004\045\017" +
    "\043\001\002\000\010\003\042\004\045\017\043\001\002" +
    "\000\010\003\042\004\045\017\043\001\002\000\024\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6\021\ufff6\023\ufff6" +
    "\024\ufff6\026\ufff6\001\002\000\024\013\ufff9\014\ufff9\015" +
    "\052\016\047\020\ufff9\021\ufff9\023\ufff9\024\ufff9\026\ufff9" +
    "\001\002\000\014\013\051\014\046\015\052\016\047\026" +
    "\056\001\002\000\004\021\057\001\002\000\004\037\060" +
    "\001\002\000\004\035\061\001\002\000\010\003\042\004" +
    "\045\017\043\001\002\000\014\013\051\014\046\015\052" +
    "\016\047\021\063\001\002\000\004\033\064\001\002\000" +
    "\004\035\065\001\002\000\004\025\066\001\002\000\004" +
    "\022\067\001\002\000\010\003\042\004\045\017\043\001" +
    "\002\000\014\013\051\014\046\015\052\016\047\024\071" +
    "\001\002\000\010\003\042\004\045\017\043\001\002\000" +
    "\014\013\051\014\046\015\052\016\047\023\073\001\002" +
    "\000\004\024\074\001\002\000\004\022\075\001\002\000" +
    "\010\003\042\004\045\017\043\001\002\000\014\013\051" +
    "\014\046\015\052\016\047\024\077\001\002\000\010\003" +
    "\042\004\045\017\043\001\002\000\014\013\051\014\046" +
    "\015\052\016\047\023\101\001\002\000\004\026\102\001" +
    "\002\000\004\021\103\001\002\000\004\040\104\001\002" +
    "\000\004\035\105\001\002\000\004\005\106\001\002\000" +
    "\004\021\107\001\002\000\004\023\110\001\002\000\012" +
    "\002\uffed\003\113\010\114\012\004\001\002\000\004\002" +
    "\uffee\001\002\000\004\002\uffef\001\002\000\004\002\uffeb" +
    "\001\002\000\004\005\116\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\uffec\001\002\000\024\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7\026" +
    "\ufff7\001\002\000\024\013\ufff8\014\ufff8\015\052\016\047" +
    "\020\ufff8\021\ufff8\023\ufff8\024\ufff8\026\ufff8\001\002\000" +
    "\014\013\051\014\046\015\052\016\047\020\122\001\002" +
    "\000\024\013\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4\021" +
    "\ufff4\023\ufff4\024\ufff4\026\ufff4\001\002\000\004\005\124" +
    "\001\002\000\004\021\ufff2\001\002\000\004\027\126\001" +
    "\002\000\004\035\127\001\002\000\006\005\020\021\ufff0" +
    "\001\002\000\004\021\131\001\002\000\004\031\132\001" +
    "\002\000\004\035\133\001\002\000\004\025\134\001\002" +
    "\000\004\005\135\001\002\000\004\024\136\001\002\000" +
    "\004\005\137\001\002\000\004\026\140\001\002\000\004" +
    "\021\141\001\002\000\004\032\142\001\002\000\004\035" +
    "\143\001\002\000\004\025\144\001\002\000\010\003\042" +
    "\004\045\017\043\001\002\000\014\013\051\014\046\015" +
    "\052\016\047\024\146\001\002\000\010\003\042\004\045" +
    "\017\043\001\002\000\014\013\051\014\046\015\052\016" +
    "\047\026\150\001\002\000\004\021\151\001\002\000\004" +
    "\033\152\001\002\000\004\035\153\001\002\000\004\025" +
    "\154\001\002\000\004\022\155\001\002\000\010\003\042" +
    "\004\045\017\043\001\002\000\014\013\051\014\046\015" +
    "\052\016\047\024\157\001\002\000\010\003\042\004\045" +
    "\017\043\001\002\000\014\013\051\014\046\015\052\016" +
    "\047\023\161\001\002\000\004\024\162\001\002\000\004" +
    "\022\163\001\002\000\010\003\042\004\045\017\043\001" +
    "\002\000\014\013\051\014\046\015\052\016\047\024\165" +
    "\001\002\000\010\003\042\004\045\017\043\001\002\000" +
    "\014\013\051\014\046\015\052\016\047\023\167\001\002" +
    "\000\004\026\170\001\002\000\004\021\171\001\002\000" +
    "\004\023\172\001\002\000\012\002\uffed\003\113\010\114" +
    "\012\004\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\006\002\006\003\004\001\001\000\004\004" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\043\001\001\000\002\001\001\000\004\010" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\117\001\001\000\004\010\116\001\001\000\004\010" +
    "\054\001\001\000\004\010\053\001\001\000\004\010\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\067\001\001\000\002\001\001\000\004\010" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\075\001\001\000\002\001\001\000" +
    "\004\010\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\111\005\114\006\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\144\001\001\000\002\001\001\000\004" +
    "\010\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\155\001\001\000\002\001\001\000" +
    "\004\010\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\163\001\001\000\002\001" +
    "\001\000\004\010\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\111\005\172\006\110\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GraficasParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GraficasParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GraficasParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





 //Listas
    private ArrayList<String> errorsList=new ArrayList<String>();
    private ArrayList<Graficas> graficasList=new ArrayList<Graficas>();
    private ArrayList<GraficasFinded> reporteGraficasList= new ArrayList<GraficasFinded>();
    private ArrayList<ErrorFinded> reporteErrorList= new ArrayList<ErrorFinded>();
    private ArrayList<OperadorFinded> reporteOperadorList= new ArrayList<OperadorFinded>();

 public GraficasParser(GraficasLexer lexer) {
        super(lexer);
    }

@Override
    /*    public void syntax_error(Symbol st) {
            //Reporte el error
            List<Integer> lista=expected_token_ids();
        	Token token = (Token) st.value;
            report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
            //Imprime el error
            errorsList.add(String.format("Error Lexico con el Token: '%s' este no pertenece a la estructura- linea: %d  columna: %d", token.getLexeme(), token.getLine(), token.getColumn()));
            reporteErrorList.add(new ErrorFinded(token.getLexeme(),token.getLine(),token.getColumn(),"Sintactico","Error sintactico, se esperaba "+tokenEsperado(lista.get(0))));

            errorsList.add(String.format(token.getLexeme(),token.getLine(),token.getColumn(),"Lexico","Símbolo no existe en el lenguaje"));
            reporteErrorList.add(new ErrorFinded(token.getLexeme(),token.getLine(),token.getColumn(),"Lexico","Símbolo no existe en el lenguaje"));


        }*/


public void syntax_error(Symbol s){
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");

        //Reporte el error
               /*     List<Integer> lista=expected_token_ids();
                	Token token = (Token) s.value;
                    report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
                    //Imprime el error
                    errorsList.add(String.format("Error Lexico con el Token: '%s' este no pertenece a la estructura- linea: %d  columna: %d", token.getLexeme(), token.getLine(), token.getColumn()));
    reporteErrorList.add(new ErrorFinded(token.getLexeme(),token.getLine(),token.getColumn(),"Lexico","Símbolo no existe en el lenguaje"));
*/
//Reporte sintactico
    List<Integer> lista=expected_token_ids();
    Integer linea = (Integer) s.left;
    Integer columna = (Integer) s.right;
    String componente = (String) s.value;
    report_error("Error Sintáctico en la Línea " + linea +
            " Columna "+columna+ ". No se esperaba este componente: " +componente+"." + "\n",null);
    //Imprime el error

    errorsList.add(String.format("Error Sintactico con el Token: '%s' este no pertenece a la estructura- linea: %d  columna: %d", componente, linea, columna));

    reporteErrorList.add(new ErrorFinded(componente, linea, columna,"Sintactico","Error sintactico, se esperaba "+tokenEsperado(lista.get(0))));

    }

        @Override
            public List<Integer> expected_token_ids() {
                return super.expected_token_ids();
            }
        	    //Retorna list de errores sintacticos
                public ArrayList getReporteErrorsList(){
        	        return reporteErrorList;
        	    }
                //Retorna list de errores sintacticos del reporte
                public ArrayList getErrorsList(){
        	        return errorsList;
        	    }

                 //Retorna list de operadores
                public ArrayList getOperadoresList(){
        	        return reporteOperadorList;
        	    }

//Ingresa datos en array de operadores
        public void addOperadorList(OperadorFinded operador){
            try {
                 reporteOperadorList.add(operador);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }

	     //Retorna list de graficas
                public ArrayList getGraficasList(){
        	        return graficasList;
        	    }
            //Ingresa datos en array de graficas
                    public void addGraficasList(Graficas grafica){
                        try {
                             graficasList.add(grafica);
                            }
                        catch(Exception e) {
                            System.out.println("error encontrado: "+e);
                            }
            	    }
            	     //Retorna list de objetos
                            public ArrayList getGraficaList(){
                    	        return reporteGraficasList;
                    	    }
                            //Ingresa datos en array de objetos
                            public void addGraficaList(String grafica){
                                boolean graficaEncontrada = false;
                                try {
                                    if(reporteGraficasList.size()==0){
                                        GraficasFinded nuevaGrafica=new GraficasFinded(grafica,1);
                                        reporteGraficasList.add(nuevaGrafica);
                                    }
                                    else{
                                        for ( GraficasFinded graficasEncontradas : reporteGraficasList) {
                                            if(graficasEncontradas.getGrafica().equals(grafica)){
                                                graficasEncontradas.setCantidad(graficasEncontradas.getCantidad()+1);
                                                graficaEncontrada=true;
                                            }
                                        }
                                        if(graficaEncontrada==false){
                                           GraficasFinded nuevaGrafica=new GraficasFinded(grafica,1);
                                            reporteGraficasList.add(nuevaGrafica);
                                        }
                                    }
                                }
                                catch(Exception e) {
                                    System.out.println("error encontrado: "+e);
                                    }
                    	    }

private String tokenEsperado(int token){
                if(token==16)return "{";
                else if(token==17)return "}";
                else if(token==19)return "[";
                else if(token==20)return "]";
                else if(token==4)return "barra";
                else if(token==5)return "pie";
                else if(token==15)return ";";
                else if(token==6)return "ejecutar";
                else if(token==18)return ",";
                else if(token==2)return "entero";
                else if(token==14)return ")";
                else if(token==13)return "(";
                else return " ";
        }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$GraficasParser$actions {
  private final GraficasParser parser;

  /** Constructor */
  CUP$GraficasParser$actions(GraficasParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$GraficasParser$do_action_part00000000(
    int                        CUP$GraficasParser$act_num,
    java_cup.runtime.lr_parser CUP$GraficasParser$parser,
    java.util.Stack            CUP$GraficasParser$stack,
    int                        CUP$GraficasParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GraficasParser$result;

      /* select the action based on the action number */
      switch (CUP$GraficasParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).value;
		RESULT = start_val;
              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GraficasParser$parser.done_parsing();
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= Definir 
            {
              Object RESULT =null;

              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en expresion");
              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicio ::= 
            {
              Object RESULT =null;

              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Definir ::= DEFINIR Grafica 
            {
              Object RESULT =null;

              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Definir",1, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Grafica ::= PIE LLAVE_ABRE TITULO DOSPUNTOS Identificador PTCOMA TIPOS DOSPUNTOS TIPO PTCOMA ETIQUETA DOSPUNTOS CORCHETE_ABRE IDENTIFICADOR COMA IDENTIFICADOR CORCHETE_CIERRA PTCOMA VALORES DOSPUNTOS CORCHETE_ABRE Operacion COMA Operacion CORCHETE_CIERRA PTCOMA TOTAL DOSPUNTOS Operacion PTCOMA UNIR DOSPUNTOS CORCHETE_ABRE LLAVE_ABRE Operacion COMA Operacion LLAVE_CIERRA COMA LLAVE_ABRE Operacion COMA Operacion LLAVE_CIERRA CORCHETE_CIERRA PTCOMA EXTRA DOSPUNTOS IDENTIFICADOR PTCOMA LLAVE_CIERRA Proxima 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-47)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-47)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-47)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-43)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-43)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-43)).value;
		int etiquetas1left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-38)).left;
		int etiquetas1right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-38)).right;
		Token etiquetas1 = (Token)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-38)).value;
		int etiquetas2left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-36)).left;
		int etiquetas2right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-36)).right;
		Token etiquetas2 = (Token)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-36)).value;
		int valores1left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-30)).left;
		int valores1right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-30)).right;
		Integer valores1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-30)).value;
		int valores2left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-28)).left;
		int valores2right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-28)).right;
		Integer valores2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-28)).value;
		int totalleft = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-23)).left;
		int totalright = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-23)).right;
		Integer total = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-23)).value;
		int unir1left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-17)).left;
		int unir1right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-17)).right;
		Integer unir1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-17)).value;
		int unir2left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-15)).left;
		int unir2right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-15)).right;
		Integer unir2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-15)).value;
		int unir3left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-11)).left;
		int unir3right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-11)).right;
		Integer unir3 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-11)).value;
		int unir4left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-9)).left;
		int unir4right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-9)).right;
		Integer unir4 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-9)).value;
		int extraleft = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-3)).left;
		int extraright = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-3)).right;
		Token extra = (Token)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-3)).value;
		Pie nuevaGraficaPie=new Pie("Pie",titulo.toString(), unir1,unir2,unir3,unir4, etiquetas1.getLexeme(), etiquetas2.getLexeme(), valores1,valores2, tipo.getLexeme(), extra.getLexeme());
   addGraficasList(nuevaGraficaPie);
   addGraficaList("Pie"); 
              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Grafica",2, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-51)), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Grafica ::= BARRAS LLAVE_ABRE TITULO DOSPUNTOS Identificador PTCOMA EJEX DOSPUNTOS CORCHETE_ABRE IDENTIFICADOR COMA IDENTIFICADOR CORCHETE_CIERRA PTCOMA EJEY DOSPUNTOS CORCHETE_ABRE Operacion COMA Operacion CORCHETE_CIERRA PTCOMA UNIR DOSPUNTOS CORCHETE_ABRE LLAVE_ABRE Operacion COMA Operacion LLAVE_CIERRA COMA LLAVE_ABRE Operacion COMA Operacion LLAVE_CIERRA CORCHETE_CIERRA PTCOMA LLAVE_CIERRA Proxima 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-35)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-35)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-35)).value;
		int ejex1left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-30)).left;
		int ejex1right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-30)).right;
		Token ejex1 = (Token)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-30)).value;
		int ejex2left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-28)).left;
		int ejex2right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-28)).right;
		Token ejex2 = (Token)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-28)).value;
		int ejey1left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-22)).left;
		int ejey1right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-22)).right;
		Integer ejey1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-22)).value;
		int ejey2left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-20)).left;
		int ejey2right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-20)).right;
		Integer ejey2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-20)).value;
		int unir1left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-13)).left;
		int unir1right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-13)).right;
		Integer unir1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-13)).value;
		int unir2left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-11)).left;
		int unir2right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-11)).right;
		Integer unir2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-11)).value;
		int unir3left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-7)).left;
		int unir3right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-7)).right;
		Integer unir3 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-7)).value;
		int unir4left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-5)).left;
		int unir4right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-5)).right;
		Integer unir4 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-5)).value;
		Barras nuevaGraficaBarra=new  Barras("Pie",titulo.toString(), unir1,unir2,unir3,unir4, ejex1.getLexeme(), ejex2.getLexeme(), ejey1,ejey2);
    addGraficasList(nuevaGraficaBarra);
   addGraficaList("Barras"); 
              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Grafica",2, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-39)), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Grafica ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en expresion");
              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Grafica",2, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Operacion ::= Operacion SUMA Operacion 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).right;
		Token signo = (Token)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.peek()).value;
		 RESULT = new Integer(numero1.intValue()+numero2.intValue());
OperadorFinded nuevoOperador=new OperadorFinded("Suma", signo.getLine(),signo.getColumn(),String.valueOf(numero1+"+"+numero2));
reporteOperadorList.add(nuevoOperador);
              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Operacion",6, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Operacion ::= Operacion RESTA Operacion 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).right;
		Token signo = (Token)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.peek()).value;
		 RESULT = new Integer(numero1.intValue()-numero2.intValue());
OperadorFinded nuevoOperador=new OperadorFinded("Resta", signo.getLine(),signo.getColumn(),String.valueOf(numero1+"-"+numero2));
reporteOperadorList.add(nuevoOperador);
              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Operacion",6, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Operacion ::= Operacion MULTIPLICACION Operacion 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).right;
		Token signo = (Token)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.peek()).value;
		 RESULT = new Integer(numero1.intValue()*numero2.intValue());
OperadorFinded nuevoOperador=new OperadorFinded("Multiplicacion", signo.getLine(),signo.getColumn(),String.valueOf(numero1+"*"+numero2));
reporteOperadorList.add(nuevoOperador);
              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Operacion",6, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Operacion ::= Operacion DIVISION Operacion 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).right;
		Token signo = (Token)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.peek()).value;
		 RESULT = new Integer(numero1.intValue()/numero2.intValue());
OperadorFinded nuevoOperador=new OperadorFinded("Division", signo.getLine(),signo.getColumn(),String.valueOf(numero1+"/"+numero2));
reporteOperadorList.add(nuevoOperador);
              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Operacion",6, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Operacion ::= ENTERO 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.peek()).value;
		  RESULT = Integer.valueOf( n.getLexeme()); 
              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Operacion",6, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Operacion ::= PARENTESISA Operacion PARENTESISB 
            {
              Integer RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).right;
		Integer operacion = (Integer)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)).value;
		 RESULT = operacion; 
              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Operacion",6, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Operacion ::= error 
            {
              Integer RESULT =null;
		int errorleft = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()).left;
		int errorright = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()).right;
		Object error = (Object)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.peek()).value;
		System.out.println("Error en expresion");
              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Operacion",6, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Identificador ::= IDENTIFICADOR ESPACIO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Identificador",5, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Identificador",5, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Identificador ::= 
            {
              Object RESULT =null;

              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Identificador",5, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proxima ::= Definir 
            {
              Object RESULT =null;

              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Proxima",3, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Proxima ::= Ejecutar 
            {
              Object RESULT =null;

              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Proxima",3, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Proxima ::= 
            {
              Object RESULT =null;

              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Proxima",3, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Ejecutar ::= EJECUTAR IDENTIFICADOR 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()).right;
		Token titulo = (Token)((java_cup.runtime.Symbol) CUP$GraficasParser$stack.peek()).value;

              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Ejecutar",4, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.elementAt(CUP$GraficasParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Ejecutar ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en expresion");
              CUP$GraficasParser$result = parser.getSymbolFactory().newSymbol("Ejecutar",4, ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraficasParser$stack.peek()), RESULT);
            }
          return CUP$GraficasParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$GraficasParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$GraficasParser$do_action(
    int                        CUP$GraficasParser$act_num,
    java_cup.runtime.lr_parser CUP$GraficasParser$parser,
    java.util.Stack            CUP$GraficasParser$stack,
    int                        CUP$GraficasParser$top)
    throws java.lang.Exception
    {
              return CUP$GraficasParser$do_action_part00000000(
                               CUP$GraficasParser$act_num,
                               CUP$GraficasParser$parser,
                               CUP$GraficasParser$stack,
                               CUP$GraficasParser$top);
    }
}

}
